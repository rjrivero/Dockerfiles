global
    log $LOG_HOST local0
    log $LOG_HOST local1 notice
    log-send-hostname
    pidfile /home/haproxy/haproxy.pid
    nbproc 2
    maxconn 128000
    user haproxy
    group haproxy

defaults
    log global
    option log-health-checks
    # make sure log-format is on a single line
    # log-format {"type":"haproxy","timestamp":%Ts,"http_status":%ST,"http_request":"%r","remote_addr":"%ci","bytes_read":%B,"upstream_addr":"%si","backend_name":"%b","retries":%rc,"bytes_uploaded":%U,"upstream_response_time":"%Tr","upstream_connect_time":"%Tc","session_duration":"%Tt","termination_state":"%ts"}
    mode   http
    option httplog
    option dontlognull
    option forwardfor
    option http-keep-alive
    option http-tunnel
    timeout connect 5000
    timeout client 50000
    timeout server 50000
#    errorfile 400 /usr/local/etc/haproxy/errors/400.http
#    errorfile 403 /usr/local/etc/haproxy/errors/403.http
#    errorfile 408 /usr/local/etc/haproxy/errors/408.http
#    errorfile 500 /usr/local/etc/haproxy/errors/500.http
#    errorfile 502 /usr/local/etc/haproxy/errors/502.http
#    errorfile 503 /usr/local/etc/haproxy/errors/503.http
#    errorfile 504 /usr/local/etc/haproxy/errors/504.http

frontend http-in

    capture request header Host len 48
    bind *:8080
  
    {{range $service := ls "/services"}}
    {{$key := printf "/services/%s/domain" $service}}  {{if exists $key}}
    acl host_{{$service}} hdr(Host) -i {{getv $key}}
    {{end}}
    {{$key := printf "/services/%s/url_reg" $service}}  {{if exists $key}}
    acl host_{{$service}} url_reg -i {{getv $key}}
    {{end}}  
    {{$key := printf "/services/%s/health" $service}}  {{if exists $key}}
    acl {{$service}}_health path_beg {{getv $key}}
    {{end}}  
    {{end}}
    
    {{range $service := ls "/services"}}
    use_backend {{$service}} if host_{{$service}}
    {{$key := printf "/services/%s/health" $service}}  {{if exists $key}}
    use_backend {{$service}} if {{$service}}_health
    {{end}}  
    {{end}}

{{range $service := ls "/services"}}

{{$key := printf "/services/%s/password" $service}}  {{if exists $key}}
userlist usersFor_{{$service}}
  user admin insecure-password {{getv $key}}
{{end}}

backend {{$service}}

    {{$key := printf "/services/%s/password" $service}}  {{if exists $key}}
    acl authOK_{{$service}} http_auth(usersFor_{{$service}})
    http-request auth realm {{$service}} if !authOK_{{$service}}
    {{end}}

    balance leastconn
    {{range $upstream := ls (printf "/services/%s/upstreams" $service)}}
    server {{$upstream}} {{printf "/services/%s/upstreams/%s" $service $upstream | getv}} check
    {{end}}

{{end}}

{{range $name := ls "/tcp-services"}}
listen {{$name}}
    mode tcp
    bind {{printf "/tcp-services/%s/ports" $name | getv}}
    {{range $upstream := ls (printf "/tcp-services/%s/upstreams" $name)}}
    server {{$upstream}} {{printf "/tcp-services/%s/upstreams/%s" $name $upstream | getv}} check
    {{end}}
{{end}}

listen MyStats
    mode http
    bind 0.0.0.0:$STATS_PORT
    stats enable
    stats uri /
    stats refresh 5s
    stats show-node
    stats show-legends
    
    # if authentication is wanted
    acl auth_ok http_auth(stats-auth)
    http-request auth unless auth_ok
 
userlist stats-auth
    user $STATS_USER insecure-password $STATS_PASSWORD
